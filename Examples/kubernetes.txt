--------Useful
Get Api Resouces
kubectl api-resources

-------1. Pods
1. Get List of pods
kubectl get pods

2. Describe Pod
kubectl describe pod <PodName>
3. Describe Api Resources
kubectl api-Resources

4. Remove Pod
kubectl delete pod <PodName>

5. Get Yaml of Pod
kubectl get pod <PodName> -o yaml


6- Connect to container 
Kubectl exec -ti <PodName> -- <Command Ex, -- sh> 


6. Get Logs Pod
kubectl logs <PodName> <-f -> Live logs>


4. Create From Yaml Manifest
kubectl apply -f pod.yaml 

5. Delete from Yaml Mannifest
kubectl delete -f pod.yaml 

6. Pods With Multiple Containers

7. Label 

Others:
Run Pod
kubectl run mynginx --image=nginx --labels="app=hazelcast,env=prod"
Kubectl exec -ti mynginx -- /bin/bash

-------2. Replica Sets
Replica set use labes to match pods even if they were already existing.

1. Create Replica Sets from manifest 
kubectl apply -f rs.yaml 

2. Get List of Replicaset
kubectl get replicaset


-----3. Deployments
Deployment Manage Replica Sets
1. Get Status of Deployments
kubectl rollout status deployment <DeploymentName>

2. Get List of Deployments
kubectl get deployment

3. Describe Deployments
kubectl get deployment  <DeploymentName> -o yaml

4. Describe Deployments
kubectl describe deployment  <DeploymentName>


5. Apply and Update Deployment
kubectl apply -f <DeploymentFileName.yaml>


6. See history of deployment
kubectl rollout history deployment <DeploymentName>

7. Use Annotations

8. Get Revision Changes
kubectl rollout history deployment <DeploymentName> --revision=<RevistionNumber>


9. Rollback
kubectl rollout undo deployment <DeploymentName> --to-revision=<RevisitonNumber>


------Services
Services watch pods with given labels and distributes the load between them it has a static ip
Services create a endpoint behind the scenes and register pods in that endpoint
Service use the service name as dns (needs to be unique between dns)
Services Types
    1. Cluster IP: Internal IP in the cluster, is constant over time.
    2. NodePort: Expose a port in the Node externally (Behind the scenes it creates a ClusterIP + Opens the port to the external traffic)
    3. LoadBalancer: Only works for cloud, behind the scenes it creates a load balancer resource in the cloud and register a node port in that resource

1. Create a Service


2. Get Services
kubectl get services [-l app=front]

3. Describe Service
kubectl describe service <ServiceName>

4. Describe endpoints of a service
kubectl describe endpoints <ServiceName>


------Namespaces

1. Get All namespaces
kubectl get namespaces

2. Create Namespaces
kubectl create namespace <Name>

3. Get Labels 
kubectl get namespaces --show-labels

4. Describe
Kubectl describe namespaces <Name>

5. Create Namespace using yaml

6. Get pods in namespace
kubectl get pods -n <Name>
-> Delete in namespace:
kubectl delete pod <PodName> -n <Name>

7. Apply In namespace
kubectl apply -f <FileName>.yaml -n <Name>
kubectl apply -f pods.yaml -n development

8. Deploy to namespace


9.DNS for namespace:
Access DSN for Services in different namespaces: <ServiceName>.<Namespace>.svc.cluster.local

10. Create a context in kubernetes with defaul namespace
kubectl config current-context
kubectl config view
kubectl set-context <Name>  --namespace=<NamespaceName> --cluster=<ClusterName> --user=<UserName>
kubectl config use-context <ContextName>

kubectl config set-context minikube-development  --namespace=development --cluster=minikube --user=minikube
kubectl config use-context minikube-development

-------Resource Limits and Requests
1. Apply a limit of cpu and ram to a pod
Request maximun can be exceded up to the Limit max as long as the are available resources in the Kubernetes 

-------Limits Range
Apply request and limits to individual objects in namespace.

1. APply a limit range from yaml

2. Get all limit range
kubectl get limitrange

3. Describe 
kubectl describe limitrange <Name> -n <Namespace>

4. Limit can be seen by describing the namespace
kubectl describe namespace default



-------Resource Quota
Limit the overall resources consumed by a namespace

1. Apply a resource quota from yaml

2. Get all resource quotas:
kubectl get resourcequotas 

3.Describe Resource Quota
kubectl describe resource quota

2. Quotas can also be shown by describing the namespace 
kubectl describe namespace <NamespaceName>

----Probes:
Liveness -> Proves to know if a containers is alive at any given point in time
Readiness-> Pod is ready to recieve traffic
Startup-> For application that take to long to start

1. Create a liveness Proves
2. Create a readiness prove
